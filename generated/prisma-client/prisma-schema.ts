// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateTrade {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTrade(data: TradeCreateInput!): Trade!
  updateTrade(data: TradeUpdateInput!, where: TradeWhereUniqueInput!): Trade
  updateManyTrades(data: TradeUpdateManyMutationInput!, where: TradeWhereInput): BatchPayload!
  upsertTrade(where: TradeWhereUniqueInput!, create: TradeCreateInput!, update: TradeUpdateInput!): Trade!
  deleteTrade(where: TradeWhereUniqueInput!): Trade
  deleteManyTrades(where: TradeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  trade(where: TradeWhereUniqueInput!): Trade
  trades(where: TradeWhereInput, orderBy: TradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trade]!
  tradesConnection(where: TradeWhereInput, orderBy: TradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TradeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  trade(where: TradeSubscriptionWhereInput): TradeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Trade {
  id: ID!
  description: String!
  live: Boolean!
  trader: User
}

type TradeConnection {
  pageInfo: PageInfo!
  edges: [TradeEdge]!
  aggregate: AggregateTrade!
}

input TradeCreateInput {
  id: ID
  description: String!
  live: Boolean
  trader: UserCreateOneWithoutTradesInput
}

input TradeCreateManyWithoutTraderInput {
  create: [TradeCreateWithoutTraderInput!]
  connect: [TradeWhereUniqueInput!]
}

input TradeCreateWithoutTraderInput {
  id: ID
  description: String!
  live: Boolean
}

type TradeEdge {
  node: Trade!
  cursor: String!
}

enum TradeOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  live_ASC
  live_DESC
}

type TradePreviousValues {
  id: ID!
  description: String!
  live: Boolean!
}

input TradeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  live: Boolean
  live_not: Boolean
  AND: [TradeScalarWhereInput!]
  OR: [TradeScalarWhereInput!]
  NOT: [TradeScalarWhereInput!]
}

type TradeSubscriptionPayload {
  mutation: MutationType!
  node: Trade
  updatedFields: [String!]
  previousValues: TradePreviousValues
}

input TradeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TradeWhereInput
  AND: [TradeSubscriptionWhereInput!]
}

input TradeUpdateInput {
  description: String
  live: Boolean
  trader: UserUpdateOneWithoutTradesInput
}

input TradeUpdateManyDataInput {
  description: String
  live: Boolean
}

input TradeUpdateManyMutationInput {
  description: String
  live: Boolean
}

input TradeUpdateManyWithoutTraderInput {
  create: [TradeCreateWithoutTraderInput!]
  delete: [TradeWhereUniqueInput!]
  connect: [TradeWhereUniqueInput!]
  set: [TradeWhereUniqueInput!]
  disconnect: [TradeWhereUniqueInput!]
  update: [TradeUpdateWithWhereUniqueWithoutTraderInput!]
  upsert: [TradeUpsertWithWhereUniqueWithoutTraderInput!]
  deleteMany: [TradeScalarWhereInput!]
  updateMany: [TradeUpdateManyWithWhereNestedInput!]
}

input TradeUpdateManyWithWhereNestedInput {
  where: TradeScalarWhereInput!
  data: TradeUpdateManyDataInput!
}

input TradeUpdateWithoutTraderDataInput {
  description: String
  live: Boolean
}

input TradeUpdateWithWhereUniqueWithoutTraderInput {
  where: TradeWhereUniqueInput!
  data: TradeUpdateWithoutTraderDataInput!
}

input TradeUpsertWithWhereUniqueWithoutTraderInput {
  where: TradeWhereUniqueInput!
  update: TradeUpdateWithoutTraderDataInput!
  create: TradeCreateWithoutTraderInput!
}

input TradeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  live: Boolean
  live_not: Boolean
  trader: UserWhereInput
  AND: [TradeWhereInput!]
}

input TradeWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String
  trades(where: TradeWhereInput, orderBy: TradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trade!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String
  trades: TradeCreateManyWithoutTraderInput
}

input UserCreateOneWithoutTradesInput {
  create: UserCreateWithoutTradesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTradesInput {
  id: ID
  name: String!
  email: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  trades: TradeUpdateManyWithoutTraderInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateOneWithoutTradesInput {
  create: UserCreateWithoutTradesInput
  update: UserUpdateWithoutTradesDataInput
  upsert: UserUpsertWithoutTradesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutTradesDataInput {
  name: String
  email: String
}

input UserUpsertWithoutTradesInput {
  update: UserUpdateWithoutTradesDataInput!
  create: UserCreateWithoutTradesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  trades_some: TradeWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`